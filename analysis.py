#!/usr/bin/env python3
# coding: utf8
import requests
import configparser
import pandas as pd
from lxml import html
import smtplib, ssl
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from office365.runtime.auth.authentication_context import AuthenticationContext
from office365.sharepoint.client_context import ClientContext
from office365.sharepoint.file import File
import io
import pandas as pd
import json

'''
python -m smtpd -c DebuggingServer -n localhost:1025
'''
#varaibles to connect to sharepoint
sharepoint_url = "https://fortinet-my.sharepoint.com/personal/glacave_fortinet-us_com"
sharepoint_username = 'glacave@fortinet-us.com'
sharepoint_password = 'SWzer75!klp'
# variables to send the mail
port = 465  # For SSL
smtp_server = "smtp.gmail.com"
sender_email = "lacgtestserver@gmail.com"
password = "qhyt765iop"
# import configuration from '.ini' file
config = configparser.ConfigParser()
config.read('.ini')

def send_mail(item):
    """
    Sends a mail to the person who subscribed
    to this cve newsletter\n
    :param : (dict) object with info on the cve and the related ips
    """
    msg = MIMEMultipart()
    msg['Subject'] = 'NEW IPS UPDATE %s' % item['cve_name']
    body = "CVE NAME: %s<br> CVE URL : %s<br><br> IPS NAME: %s<br> IPS URL : %s<br> IPS CREATION DATE : %s" % (item['cve_name'],item['cve_url'],item['ips_name'],item['ips_url'],item['creation_ips'])
    msg.attach(MIMEText(body, 'html')) #set to whatever text format is preferred

    context = ssl.create_default_context()
    with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
        server.login(sender_email,password)
        server.sendmail(sender_email, item['EMAIL'], msg.as_string())

def get_updated_ips(url):
    """
    Returns the list of updated ips\n
    :param : (str) url\n
    :return: (dict) dict of name and url of ips
    """
    page = requests.get(url)
    tree = html.fromstring(page.content)

    # get all the ips marked from https://fortiguard.com/updates/ips
    ips = {
        'ips_name' : tree.xpath("//a[starts-with(@href, '/encyclopedia/ips')]/text()"),
        'ips_url' : tree.xpath("//a[starts-with(@href, '/encyclopedia/ips')]/@href"),
    }

    return ips

def check_ips_match_cve(ips):
    """
    Returns the list of cve related to ips
    found before \n
    :param : (dict) name and url of ips\n
    :return: (list) list of cves with their names, url, ips, ips_url, ips creation date
    """
    list = []
    for idx,ips_url in enumerate(ips['ips_url']):
        full_url = config['IPS_API']['ips_url'] + ips_url
        # connect to the cve page https://fortiguard.com/search?q= <<id_cve>>
        page = requests.get(full_url)
        tree = html.fromstring(page.content)

        # if a cve is related then we search all info
        cve_url = tree.xpath("//a[starts-with(@href, 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=')]/@href")
        if cve_url:
            creation = tree.xpath("//td[text()='Created']/following-sibling::td/text()")
            cve_name = tree.xpath("//a[starts-with(@href, 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=')]/text()")

            found_values = {
                'cve_url' : cve_url,
                'cve_name' : cve_name,
                'ips_name' : ips['ips_name'][idx],
                'ips_url' : full_url,
                'creation_ips' : creation[0]
            }
            list.append(found_values)
    return list

def connect_to_sharepoint():
    ctx_auth = AuthenticationContext(sharepoint_url)
    if ctx_auth.acquire_token_for_user(sharepoint_username, sharepoint_password):
        ctx = ClientContext(sharepoint_url, ctx_auth)
        web = ctx.web
        ctx.load(web)
        ctx.execute_query()
        filename = 'test.xlsx'
        with open(filename, 'wb') as output_file:
            response = File.open_binary(ctx,ctx.web.properties["ServerRelativeUrl"]+ "/Documents/Classeur.xlsx")
            bytes_file_obj = io.BytesIO()
            bytes_file_obj.write(response.content)
            bytes_file_obj.seek(0) #set file object to start
            df = pd.read_excel(bytes_file_obj)

    return df

def compare_cve_todb(cve):
    """
    Match the cve related to the updated ips
    with the cve written in the excel file\n
    :param : (list) list of cves with their names, url, ips, ips_url, ips creation date\n
    :return: (list) results of cve to send
    """
    results = []
    # load the cve from the excel file
    df = connect_to_sharepoint()
    #compare them with the cves found
    for ind in df.index:
        for item in cve:
            for name in item['cve_name']:
                if df['CVE'][ind] == name:
                    results.append(item)
                    match = item
                    match['EMAIL'] = df['EMAIL'][ind]
                    send_mail(match)
    return results

if __name__ == '__main__':
    # instantiate the parser and fed it some HTML
    cve_id = "CVE-2019-8038"
    API_URL = config['IPS_UPDATE_API']['ips_api_url']
    ips_to_search = get_updated_ips(API_URL)
    cve_to_compare = check_ips_match_cve(ips_to_search)
    found_cve = compare_cve_todb(cve_to_compare)
